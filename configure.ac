dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.63])
AC_INIT([cattle], [0.4.0.GIT], [https://github.com/hroptatyr/cattle])
AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_HEADERS([src/config.h])
AC_CONFIG_MACRO_DIR([m4])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT([dnl
#### Configuration script for cattle
#### Copyright (C) 2010-2018 Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign parallel-tests dist-xz color-tests subdir-objects])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

## the build chain
AC_PROG_CC([icc gcc cc])
SXE_CHECK_CC([gnu11 gnu99])
SXE_CHECK_CFLAGS
AC_C_BIGENDIAN

## check for yuck helper
AX_CHECK_YUCK([with_included_yuck="yes"])
AX_YUCK_SCMVER([version.mk])
AC_CONFIG_LINKS([GNUmakefile:GNUmakefile])

SXE_CHECK_DFP754
## big barf if dfp754 support isn't there
if test "${sxe_cv_feat_dfp754_literals}" = "no" -o \
	"${sxe_cv_feat_dfp754_cast_flavour}" = "unknown" -o \
	"${sxe_cv_feat_dfp754_arith_flavour}" = "unknown" -o \
	"${sxe_cv_feat_dfp754_literal_flavour}" = "unknown"; then
	AC_MSG_ERROR([
Sorry guys.  This project makes extensive use of DFP754 arithmetics.
If your hardware doesn't support it directly, make sure to instruct
your compiler (via CFLAGS) to emit calls to libdecimal/libbid and
turn on dfp754 extensions.

For the Intel C Compiler for instance this is  -intel-extensions
but it must not be used in conjunction with -std=c99 or -std=c11.

Farewell.
])
fi

AC_CHECK_HEADERS([dfp754.h])
AM_CONDITIONAL([HAVE_DFP754], [test "${ac_cv_header_dfp754_h}" = "yes"])

AC_CHECK_HEADERS([dfp/stdlib.h])
AM_CONDITIONAL([HAVE_DFP_STDLIB], [test "${ac_cv_header_dfp_stdlib_h}" = "yes"])

AC_CHECK_FUNCS([strtod32])
AM_CONDITIONAL([HAVE_STRTOD32], [test "${ac_cv_func_strtod32}" = "yes"])

AC_CHECK_FUNCS([quantized32])
AM_CONDITIONAL([HAVE_QUANTIZED32], [test "${ac_cv_func_quantized32}" = "yes"])

AC_CHECK_FUNCS([scalbnd32])
AM_CONDITIONAL([HAVE_SCALBND32], [test "${ac_cv_func_scalbnd32}" = "yes"])

save_LDFLAGS="${LDFLAGS}"
LDFLAGS="${LDFLAGS} -lm"
AC_CHECK_FUNCS([nand32])
AC_CHECK_FUNCS([isnand32])
LDFLAGS="${save_LDFLAGS}"

SXE_CHECK_ASM_CORUS

AC_CHECK_FUNCS([getline])
AC_CHECK_FUNCS([fgetln])

AM_MISSING_PROG([GPERF], [gperf])
AM_CONDITIONAL([HAVE_GPERF], [test -n "${GPERF}"])
if test -n "${GPERF}"; then
	AC_DEFINE([HAVE_GPERF], [1], [define when gperf tool is present])
fi

## coroutine provider
AM_CONDITIONAL([USE_ASM_CORUS], [test "${use_asm_corus}" = "yes"])
if test "${use_asm_corus}" = "yes"; then
	AC_DEFINE([USE_ASM_CORUS], [1], [Whether to use asm backed coroutines])
fi

## check for clitoris helper
AX_CHECK_CLITORIS

## libtool goddess^Wgoodness
## has to be down here as we're turning -Werror'ing off
LT_INIT
SXE_CHECK_LIBTOOL


AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([build-aux/Makefile])
AC_CONFIG_FILES([src/Makefile])
AC_CONFIG_FILES([info/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_OUTPUT

## trivial, no special stuff needed
apps="${apps} cattle"

if test "${use_asm_corus}" = "yes"; then
	coru=" asm"
else
	coru=" setjmp/longjmp/ucontext"
fi

echo
echo
echo "Build summary"
echo "============="
echo
echo "Build apps:${apps}"
echo "Coroutines:${coru}"
echo

dnl configure.ac ends here
